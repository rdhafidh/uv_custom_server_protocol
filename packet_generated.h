// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKET_PACKETHEADER_H_
#define FLATBUFFERS_GENERATED_PACKET_PACKETHEADER_H_

#include "flatbuffers/flatbuffers.h"

namespace PacketHeader {

struct Command;

struct Command FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4,
    VT_ID = 6
  };
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  flatbuffers::String *mutable_data() {
    return GetPointer<flatbuffers::String *>(VT_DATA);
  }
  float id() const {
    return GetField<float>(VT_ID, 10.2f);
  }
  bool mutate_id(float _id) {
    return SetField<float>(VT_ID, _id, 10.2f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           VerifyField<float>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct CommandBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(Command::VT_DATA, data);
  }
  void add_id(float id) {
    fbb_.AddElement<float>(Command::VT_ID, id, 10.2f);
  }
  CommandBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CommandBuilder &operator=(const CommandBuilder &);
  flatbuffers::Offset<Command> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Command>(end);
    return o;
  }
};

inline flatbuffers::Offset<Command> CreateCommand(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> data = 0,
    float id = 10.2f) {
  CommandBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Command> CreateCommandDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr,
    float id = 10.2f) {
  return PacketHeader::CreateCommand(
      _fbb,
      data ? _fbb.CreateString(data) : 0,
      id);
}

inline const PacketHeader::Command *GetCommand(const void *buf) {
  return flatbuffers::GetRoot<PacketHeader::Command>(buf);
}

inline Command *GetMutableCommand(void *buf) {
  return flatbuffers::GetMutableRoot<Command>(buf);
}

inline bool VerifyCommandBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PacketHeader::Command>(nullptr);
}

inline void FinishCommandBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PacketHeader::Command> root) {
  fbb.Finish(root);
}

}  // namespace PacketHeader

#endif  // FLATBUFFERS_GENERATED_PACKET_PACKETHEADER_H_
